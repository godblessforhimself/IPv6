eui and lowbytes:
6057.hex 71M		2.4G not able to process in memory
9146.hex 25M		871M able to process in memory
6057.hex  98% eui-64
9146.hex  50% eui-64
6057.hex  500s 0.1M lowbytes 0.1%
9146.hex	211s 10M lowbytes 40%

========================
EUI-64 dealer
n*2**24
can n be small?
24|16|24
to statistic


别名前缀--------多长的合适

latest input if too much use part of it
* find aliased prefixes , compare with the website
* get rid of aliased addresses
* show ASN distribution
* 

是否是别名地址|属于哪个AS|属于哪些pattern|
patter的不确定位的特征挖掘
1.kmeans
2.DBSCAN
3.Natural Breaks

=============
前缀树
一个多叉树，叉数最多为16
挑选多叉数的节点，组成表征集合，目的是表现分布
如果父节点属于集合，则子节点不属于集合，
越少的前缀数量，越多的包含数量
过短的前缀？ 同时密度越大越好-即前缀越长越好
密度大的都是前缀15的
pattern占比
前缀长度15的个数很多，因此一项的密度较小
要求 100个前缀 覆盖 90%的地址 最大密度
不同长度前缀取前100个，覆盖率>90%

=======================
pattern=xee77xxxxxxxxxxx, match count=200938, percentage=0.0673515178208
pattern=aee7xxxxxxxxxxxx, match count=2, percentage=6.70371137573e-07
pattern=xxe77bxxxxxxxxxx, match count=1, percentage=3.35185568786e-07
任务，聚合成一类
xee77xxxxxxxxxxx
==========
APD
clusters 
/64 -> /124  /120 （地址空间大小2**8=256）
100 targets
假设检测的前缀长度为l
其对应的地址空间为2**(128-l)
/64-/96

输入：IPv6地址集
统计所有长度在[min,max]之间的前缀的数量
最大15倍输入的数量
过滤少于n~100的前缀
对于剩余的前缀
生成随机地址
探测
统计相应率和别名前缀
生成别名前缀列表

去别名
=====================
问题：
python内存占用过大
任务：
每个IP40字节
共102M个IP   2M-7s   350s
建索引 100s


					-1 					63949
NO			63 17 13			46 13 4	
INDEX		51 11 14   		47 1.7 3.4
每个IP 用int存 = 24B
共 2.4G内存?

用sqlite3数据库！
create table IPs(address,AS_number)
conn.executemany('insert into IPs values (?,?)',[('aaaaaaaa',102),('aaaaaaab',103)])
conn.execute('select * from IPs')
conn.execute('select distinct AS_number from IPs')
connection.execute('select count(*) from IPs;')
connection.execute('create index AS_index on IPs (AS_number)')
b=connection.execute('select address from IPs where AS_number=-1')
b=connection.execute('select address from IPs INDEXED BY AS_INDEX where AS_number=-1')
======================
总体流程
APD
AS
Pattern
Predict
Validate
===================

APD 模块设计
======================
ASN 模块设计
输入：IPv6数据集+目标保存文件夹
两个string
输出：所有AS号和对应的前缀列表
输出2：每个AS号对应的IP集合
输出3：每个AS号对应的IP的数量&比例 可视化
=====================================
28	print(IP[:16]+'|'+IP[16:])
cluster.txt.27 画 percentage-pattern.jpg
cluster.txt.26 画出每个pattern最好的折线图
cluster.txt.25 消除包含关系
cluster.txt.24 用于获取测试数据
进行计数器的定义和实现

cluster.txt.17 >后对最后一位不同的pattern进行了聚合
cluster.txt.20 >=后对连续c位中的确定位进行了消除 205->166
1.可视化pattern
2.预测

entropy-ip
预测方法：
cpd 条件概率密度
从左到右，
根据已经有的值 和cpd的概率 进行随机

eip-generator

一个地址由n个段组成
每个段有多个取值范围和贝叶斯概率

建立模型，计算出所有段的所有组合的最终概率和对应的地址数量

若概率>1/N，则 对该模型输出 min(p * N, M)个地址 这些地址都是在范围内独立随机的

假如模型有4M个，每个模型对应的概率均匀，=1/4M

生成 1M 个地址，由于概率太小不输出地址



在单个网络内使用的方法不涉及熵
在多个网络之间使用熵聚类
熵IP的熵似乎只用来作图了
熵聚类的熵用来聚类网络


entropy-ip:
1.计算32个hex的熵
2.根据规则划分段
3.用bnfinder计算贝叶斯网络



entropy-ip预测时只考虑出现过的IP地址的组合？
1.是：加入密集区域
没有用聚类结果

2.DBSCAN
在a2-mining寻找高密度区域时使用
outliners 多次出现的
highly dense ranges 
uniformly distributed ranges 


识别出随机的地址——代价大的地址
脚本entropy-calculate.py
输入 文件名
输出 熵排序后的地址
可视化 每个地址的熵



tool
  input: IPv6 address
  step1:
    extract n address randomly
  step2:
    split n address into K fold
    gen K sub directory
    one train , one test
  step3:
    run specific model on data

step1 and step2 can be universal  数据集抽样和K折生成

step3 is different

tool2 数据集分类
  input: IPv6 address
  function:
     to classify into different types
  types:
     Low Byte
	1.ffffff
		2^24
	2.00ffff
		2^16
	3.ff00ff
		2^16
	4.0000ff
		2^8
	
     IPv4 embedding
	1.00ff00ff00ff00ff
	2.00000000ffffffff
	2^33 too large
	except 0.x.x.x i.e. 00xxxxxx
     SLAAC
		 fffe
		2^48
     Port
	1.ff0080
	 .ff0050
	2.8000ff
	 .5000ff
	for port n:
        2^8*4=2^10
	20 popular port:
	[20,21,22,23,25,53,67,68,69,80,110,123,137,138,139,143,161,162,179,389,443,636,989,990]
	

tool3 
	数据集前缀分析
	prefix.txt 前缀和数量 比例
问题
  相同前缀的IPv4地址比例较小
	
	前缀别名分析

目标
	1.识别单词
	face
	cafe
  2.识别faceb00c
	3.识别网络前缀
		step1:
		  识别数据里64前缀个数n
		step2:
			根据前缀划分数据集n
			在每个数据集上计算某特征
			a.单词
			b.分配比例
			c.
		step3:
连续的匹配
输出：字典
/64前缀 发现的字典
{
	'/64':{'word1':a1,'word2':a2}
}
IID
每4个hex记录

选取密度最大的前缀
进行低字节扫描

数量控制在1w左右
10个前缀，
只扫描000fff 2^12=4k


为不同的路由前缀分配不同的预算可能是很自然的.
例如，路由前缀的预算可能取决于其内种子的数量或前缀本身的大小。但是，这可能会严重扭曲目标生成向更密集的网络方向发展，以牺牲找到的活跃地址数量的多样性。最合适的预算分配政策是什么，以及这与目标生成目标的区别，仍然是一个悬而未决的问题。


1.别名识别
2.前缀、子网 划分
3.熵聚类 
4.6gen

